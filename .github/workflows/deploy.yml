# .github/workflows/deploy.yml
name: Deploy to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'PyPI' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.event.inputs.environment || 'pypi' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine aiofiles

    - name: Pre-deployment test
      run: |
        export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        
        # Get version
        if hasattr(simpleenvs, '__version__'):
            version = simpleenvs.__version__
        elif hasattr(simpleenvs, 'constants'):
            version = simpleenvs.constants.VERSION
        else:
            version = 'unknown'
            
        print('Deploying SimpleEnvs version:', version)
        
        # Basic functionality test
        import tempfile, os
        if hasattr(simpleenvs, 'load_dotenv'):
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write('DEPLOY_TEST=works\\n')
                env_file = f.name
            
            try:
                simpleenvs.load_dotenv(env_file)
                if os.getenv('DEPLOY_TEST') == 'works':
                    print('Pre-deployment test passed!')
                else:
                    print('Pre-deployment test failed!')
                    exit(1)
            finally:
                os.unlink(env_file)
        "

    - name: Build package
      run: |
        python -m build
        echo "Package built for deployment!"

    - name: Check package
      run: |
        twine check dist/*
        echo "Package validation passed!"

    - name: Deploy to Test PyPI
      if: github.event.inputs.environment == 'testpypi'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
        echo "Successfully deployed to Test PyPI!"

    - name: Deploy to PyPI
      if: github.event.inputs.environment == 'pypi' || github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "ðŸš€ Successfully deployed to PyPI!"

    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ github.event.inputs.environment || 'PyPI' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY