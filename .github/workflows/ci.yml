# .github/workflows/ci.yml
name: CI Pipeline
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main, develop, dev/ongoing-improvement ]  # Í∞úÎ∞ú Î∏åÎûúÏπò Ï∂îÍ∞Ä
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # üéØ ÏàòÎèô Ïã§Ìñâ Ìä∏Î¶¨Í±∞ Ï∂îÍ∞Ä
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - performance
          - security
      python_versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.11,3.12'
        type: string
      platforms:
        description: 'Platforms to test'
        required: false
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
          - all
      skip_slow_tests:
        description: 'Skip slow tests'
        required: false
        default: false
        type: boolean

env:
  # CI ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú ÌôòÍ≤ΩÎ≥ÄÏàò
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # üöÄ Platform Îß§Ìä∏Î¶≠Ïä§ ÎèôÏ†Å ÏÉùÏÑ±
  setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.matrix.outputs.python-versions }}
      platforms: ${{ steps.matrix.outputs.platforms }}
      test-scope: ${{ steps.matrix.outputs.test-scope }}
    steps:
      - name: Generate test matrix
        id: matrix
        run: |
          # Python Î≤ÑÏ†Ñ Îß§Ìä∏Î¶≠Ïä§ ÏÑ§Ï†ï
          if [[ "${{ github.event.inputs.python_versions }}" != "" ]]; then
            PYTHON_VERSIONS="${{ github.event.inputs.python_versions }}"
          else
            PYTHON_VERSIONS="3.8,3.9,3.10,3.11,3.12,3.13"
          fi
          
          # Platform Îß§Ìä∏Î¶≠Ïä§ ÏÑ§Ï†ï
          if [[ "${{ github.event.inputs.platforms }}" == "all" ]]; then
            PLATFORMS="ubuntu-latest,windows-latest,macos-latest"
          elif [[ "${{ github.event.inputs.platforms }}" != "" ]]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
          else
            PLATFORMS="ubuntu-latest,windows-latest,macos-latest"
          fi
          
          # Test scope ÏÑ§Ï†ï
          TEST_SCOPE="${{ github.event.inputs.test_scope || 'all' }}"
          
          # JSON Î∞∞Ïó¥Î°ú Î≥ÄÌôò
          PYTHON_JSON=$(echo "$PYTHON_VERSIONS" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
          PLATFORMS_JSON=$(echo "$PLATFORMS" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
          
          echo "python-versions=$PYTHON_JSON" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          echo "test-scope=$TEST_SCOPE" >> $GITHUB_OUTPUT
          
          echo "üêç Python versions: $PYTHON_JSON"
          echo "üñ•Ô∏è  Platforms: $PLATFORMS_JSON"
          echo "üß™ Test scope: $TEST_SCOPE"

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.setup.outputs.platforms) }}
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
        exclude:
          # ÏàòÎèô Ïã§ÌñâÏãú Ï†úÏô∏ Ï°∞Í±¥ ÏµúÏÜåÌôî
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles

    - name: Setup Python path
      shell: bash
      run: |
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV
        echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
        echo "PYTHONUTF8=1" >> $GITHUB_ENV

    - name: Basic functionality test
      if: needs.setup.outputs.test-scope == 'all' || needs.setup.outputs.test-scope == 'basic'
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        
        print('üêç Python version:', sys.version)
        print('üñ•Ô∏è  Platform:', sys.platform)
        print('üß™ Test scope: ${{ needs.setup.outputs.test-scope }}')
        
        try:
            import simpleenvs
            print('‚úÖ simpleenvs import successful!')
            
            # Check version
            if hasattr(simpleenvs, '__version__'):
                print('üì¶ Version:', simpleenvs.__version__)
            elif hasattr(simpleenvs, 'constants'):
                print('üì¶ Version:', simpleenvs.constants.VERSION)
            else:
                print('üì¶ Version info not found, but import works!')
            
            # Test basic functionality
            import tempfile, os
            
            if hasattr(simpleenvs, 'load_dotenv'):
                print('üß™ Testing load_dotenv...')
                
                with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                    f.write('TEST_VAR=hello\\nDEBUG=true\\nPORT=8080\\n')
                    env_file = f.name
                
                try:
                    simpleenvs.load_dotenv(env_file)
                    
                    if os.getenv('TEST_VAR') == 'hello':
                        print('‚úÖ Environment loading works!')
                    else:
                        print('‚ùå Environment variables not loaded properly')
                        
                except Exception as e:
                    print('‚ùå Function test failed:', str(e))
                finally:
                    os.unlink(env_file)
            
            print('‚úÖ All basic tests passed!')
            
        except ImportError as e:
            print('‚ùå Import failed:', str(e))
            sys.exit(1)
        except Exception as e:
            print('‚ùå Unexpected error:', str(e))
            sys.exit(1)
        "

    - name: Async functionality test
      if: needs.setup.outputs.test-scope == 'all' || needs.setup.outputs.test-scope == 'basic'
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        import asyncio
        import tempfile
        import os
        
        async def test_async():
            try:
                if hasattr(simpleenvs, 'load') or hasattr(simpleenvs, 'aload_dotenv'):
                    print('üß™ Testing async functionality...')
                    
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                        f.write('ASYNC_TEST=async_works\\n')
                        env_file = f.name
                    
                    try:
                        if hasattr(simpleenvs, 'load'):
                            await simpleenvs.load(env_file)
                        elif hasattr(simpleenvs, 'aload_dotenv'):
                            await simpleenvs.aload_dotenv(env_file)
                        
                        print('‚úÖ Async loading works!')
                    except Exception as e:
                        print('‚ùå Async test failed:', str(e))
                    finally:
                        os.unlink(env_file)
                else:
                    print('‚ÑπÔ∏è  No async functions found')
            except Exception as e:
                print('‚ùå Async test error:', str(e))
        
        try:
            asyncio.run(test_async())
        except Exception as e:
            print('‚ùå Could not run async test:', str(e))
        "

    - name: Security features test
      if: needs.setup.outputs.test-scope == 'all' || needs.setup.outputs.test-scope == 'security'
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        import tempfile
        import os
        
        print('üîí Testing security features...')
        
        # Test secure API if available
        if hasattr(simpleenvs, 'load_dotenv_secure') and hasattr(simpleenvs, 'get_secure'):
            try:
                with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                    f.write('SECRET_KEY=super_secret\\nAPI_TOKEN=secret_token\\n')
                    env_file = f.name
                
                try:
                    # Load secure
                    simpleenvs.load_dotenv_secure(env_file)
                    
                    # Test secure access
                    secret_key = simpleenvs.get_secure('SECRET_KEY')
                    if secret_key == 'super_secret':
                        print('‚úÖ Secure API access works!')
                    else:
                        print('‚ùå Secure API access failed')
                    
                    # Verify isolation
                    if os.getenv('SECRET_KEY') is None:
                        print('‚úÖ Memory isolation verified!')
                    else:
                        print('‚ö†Ô∏è  Memory isolation may not be working')
                        
                except Exception as e:
                    print('‚ùå Secure API test failed:', str(e))
                finally:
                    os.unlink(env_file)
                    
            except Exception as e:
                print('‚ùå Security test setup failed:', str(e))
        else:
            print('‚ÑπÔ∏è  Secure API not available for testing')
        "

    - name: Performance test (Quick)
      if: |
        (needs.setup.outputs.test-scope == 'all' || needs.setup.outputs.test-scope == 'performance') &&
        !inputs.skip_slow_tests
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        import time
        import tempfile
        import os
        
        print('‚ö° Testing performance...')
        
        # Create test file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
            for i in range(100):  # 100 variables for quick test
                f.write(f'VAR_{i}=value_{i}\\n')
            env_file = f.name
        
        try:
            # Test simple loading speed
            start_time = time.perf_counter()
            simpleenvs.load_dotenv(env_file)
            end_time = time.perf_counter()
            
            loading_time = (end_time - start_time) * 1000
            print(f'üìä Simple loading time: {loading_time:.2f}ms')
            
            if loading_time < 100:  # Should be much faster than 100ms
                print('‚úÖ Performance test passed!')
            else:
                print('‚ö†Ô∏è  Performance slower than expected')
                
        except Exception as e:
            print('‚ùå Performance test failed:', str(e))
        finally:
            os.unlink(env_file)
        "

  # Python 3.13 ÌäπÎ≥Ñ ÌÖåÏä§Ìä∏ (ÏÑ†ÌÉùÏ†Å)
  python-313-compatibility:
    name: Python 3.13 Compatibility Check
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.python-versions, '3.13')
    timeout-minutes: 15
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        allow-prereleases: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles

    - name: Check Python 3.13 compatibility
      shell: bash
      run: |
        python -c "
        import sys
        print('üêç Python version:', sys.version)
        print('üìä Version info:', sys.version_info)
        
        import warnings
        warnings.simplefilter('always')
        
        sys.path.insert(0, './src')
        
        try:
            import simpleenvs
            print('‚úÖ simpleenvs imports successfully on Python 3.13')
            
            import tempfile, os
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write('PYTHON313_TEST=success\\nDEBUG=true\\n')
                env_file = f.name
            
            try:
                if hasattr(simpleenvs, 'load_dotenv'):
                    simpleenvs.load_dotenv(env_file)
                    if os.getenv('PYTHON313_TEST') == 'success':
                        print('‚úÖ Basic functionality works on Python 3.13')
                    else:
                        print('‚ö†Ô∏è  Environment loading issue on Python 3.13')
                        
            except Exception as e:
                print(f'‚ö†Ô∏è  Functionality test failed on Python 3.13: {e}')
            finally:
                os.unlink(env_file)
                
        except ImportError as e:
            print(f'‚ùå Import failed on Python 3.13: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Unexpected error on Python 3.13: {e}')
            sys.exit(1)
        "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine aiofiles

    - name: Verify package can be imported before build
      run: |
        export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        print('‚úÖ Package imports successfully before build')
        "

    - name: Build package
      run: |
        python -m build
        echo "‚úÖ Package built successfully!"

    - name: Check package
      run: |
        twine check dist/*
        echo "‚úÖ Package check passed!"

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        
        python -c "
        try:
            import simpleenvs
            print('‚úÖ Wheel installation and import successful!')
        except ImportError as e:
            print(f'‚ùå Wheel import failed: {e}')
            exit(1)
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30

  # ÏàòÎèô Ïã§Ìñâ Í≤∞Í≥º ÏöîÏïΩ
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, test, build]
    if: always() && github.event_name == 'workflow_dispatch'

    steps:
    - name: Generate test summary
      run: |
        echo "## üß™ Manual CI Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test scope:** ${{ needs.setup.outputs.test-scope }}" >> $GITHUB_STEP_SUMMARY
        echo "**Python versions:** ${{ needs.setup.outputs.python-versions }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "**Skip slow tests:** ${{ inputs.skip_slow_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Test job:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build job:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY