# .github/workflows/ci.yml
name: CI Pipeline
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main, dev/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
#        exclude:
#          # Reduce CI time by skipping some combinations
#          - os: windows-latest
#            python-version: "3.8"
#          - os: macos-latest
#            python-version: "3.8"
#          # Python 3.13 is new, test on fewer platforms initially
#          - os: windows-latest
#            python-version: "3.13"
#          - os: macos-latest
#            python-version: "3.13"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated to v5 for Python 3.13 support
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles

    - name: Setup Python path
      shell: bash
      run: |
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV
        # Fix Windows encoding issues
        echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
        echo "PYTHONUTF8=1" >> $GITHUB_ENV

    - name: Test import and basic functionality
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        
        print('Python version:', sys.version)
        print('Platform:', sys.platform)
        
        try:
            import simpleenvs
            print('simpleenvs import successful!')
            
            # Check version
            if hasattr(simpleenvs, '__version__'):
                print('Version:', simpleenvs.__version__)
            elif hasattr(simpleenvs, 'constants'):
                print('Version:', simpleenvs.constants.VERSION)
            else:
                print('Version info not found, but import works!')
            
            # Test basic functionality
            import tempfile, os
            
            # Test load_dotenv if available
            if hasattr(simpleenvs, 'load_dotenv'):
                print('Testing load_dotenv...')
                
                with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                    f.write('TEST_VAR=hello\\nDEBUG=true\\nPORT=8080\\n')
                    env_file = f.name
                
                try:
                    simpleenvs.load_dotenv(env_file)
                    
                    if os.getenv('TEST_VAR') == 'hello':
                        print('Environment loading works!')
                    else:
                        print('Environment variables not loaded properly')
                        
                except Exception as e:
                    print('Function test failed:', str(e))
                finally:
                    os.unlink(env_file)
            else:
                print('load_dotenv not found')
                available_funcs = [x for x in dir(simpleenvs) if not x.startswith('_')]
                print('Available functions:', available_funcs[:10])
            
            print('All tests passed for Python ${{ matrix.python-version }} on ${{ matrix.os }}!')
            
        except ImportError as e:
            print('Import failed:', str(e))
            import os
            if os.path.exists('./src'):
                print('src/ contents:', os.listdir('./src'))
            sys.exit(1)
        except Exception as e:
            print('Unexpected error:', str(e))
            sys.exit(1)
        "

    - name: Test async functionality (if supported)
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        import asyncio
        import tempfile
        import os
        
        async def test_async():
            try:
                if hasattr(simpleenvs, 'load') or hasattr(simpleenvs, 'aload_dotenv'):
                    print('Testing async functionality...')
                    
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                        f.write('ASYNC_TEST=async_works\\n')
                        env_file = f.name
                    
                    try:
                        if hasattr(simpleenvs, 'load'):
                            await simpleenvs.load(env_file)
                        elif hasattr(simpleenvs, 'aload_dotenv'):
                            await simpleenvs.aload_dotenv(env_file)
                        
                        print('Async loading works!')
                    except Exception as e:
                        print('Async test failed:', str(e))
                    finally:
                        os.unlink(env_file)
                else:
                    print('No async functions found')
            except Exception as e:
                print('Async test error:', str(e))
        
        try:
            asyncio.run(test_async())
        except Exception as e:
            print('Could not run async test:', str(e))
        "

  # Python 3.13 compatibility check job
  python-313-compatibility:
    name: Python 3.13 Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Allow failure for now while 3.13 is still new

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        allow-prereleases: true  # In case 3.13 is still in prerelease

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles

    - name: Check for Python 3.13 specific issues
      shell: bash
      run: |
        python -c "
        import sys
        print('Python version:', sys.version)
        print('Version info:', sys.version_info)
        
        # Check for any warnings or deprecations
        import warnings
        warnings.simplefilter('always')
        
        sys.path.insert(0, './src')
        
        try:
            import simpleenvs
            print('✅ simpleenvs imports successfully on Python 3.13')
            
            # Test core functionality
            import tempfile, os
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write('PYTHON313_TEST=success\\nDEBUG=true\\n')
                env_file = f.name
            
            try:
                if hasattr(simpleenvs, 'load_dotenv'):
                    simpleenvs.load_dotenv(env_file)
                    if os.getenv('PYTHON313_TEST') == 'success':
                        print('✅ Basic functionality works on Python 3.13')
                    else:
                        print('⚠️ Environment loading issue on Python 3.13')
                else:
                    print('ℹ️ load_dotenv not available for testing')
                    
            except Exception as e:
                print(f'⚠️ Functionality test failed on Python 3.13: {e}')
            finally:
                os.unlink(env_file)
                
        except ImportError as e:
            print(f'❌ Import failed on Python 3.13: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'❌ Unexpected error on Python 3.13: {e}')
            sys.exit(1)
        "

    - name: Test async with Python 3.13
      shell: bash
      run: |
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        import asyncio
        import tempfile
        import os
        
        async def test_python313_async():
            print('Testing async functionality on Python 3.13...')
            
            try:
                with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                    f.write('PYTHON313_ASYNC=works\\n')
                    env_file = f.name
                
                if hasattr(simpleenvs, 'load'):
                    await simpleenvs.load(env_file)
                    print('✅ Async loading works on Python 3.13')
                elif hasattr(simpleenvs, 'aload_dotenv'):
                    await simpleenvs.aload_dotenv(env_file)
                    print('✅ Async loading works on Python 3.13')
                else:
                    print('ℹ️ No async functions found to test')
                    
                os.unlink(env_file)
                
            except Exception as e:
                print(f'⚠️ Async test failed on Python 3.13: {e}')
        
        try:
            asyncio.run(test_python313_async())
        except Exception as e:
            print(f'❌ Could not run async test on Python 3.13: {e}')
        "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5  # Updated to v5
      with:
        python-version: "3.13"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine aiofiles

    - name: Verify package can be imported before build
      run: |
        export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
        python -c "
        import sys
        sys.path.insert(0, './src')
        import simpleenvs
        print('✅ Package imports successfully before build')
        "

    - name: Build package
      run: |
        python -m build
        echo "✅ Package built successfully!"

    - name: Check package
      run: |
        twine check dist/*
        echo "✅ Package check passed!"

    - name: Test wheel installation
      run: |
        # Install the wheel
        pip install dist/*.whl
        
        # Test import after installation
        python -c "
        try:
            import simpleenvs
            print('✅ Wheel installation and import successful!')
        except ImportError as e:
            print(f'❌ Wheel import failed: {e}')
            exit(1)
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30