
# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles  # üëà ÌïµÏã¨ ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä!
        pip install -e .
        pip install pytest

    - name: Run tests
      run: |
        echo "üß™ Starting import test..."
        python -c "
        print('Python import test starting...')
        
        try:
            print('Attempting to import simpleenvs_python...')
            import simpleenvs_python
            print('‚úÖ Import simpleenvs_python successful!')
            
            # Check what's available
            print('Available attributes:', [x for x in dir(simpleenvs_python) if not x.startswith('_')][:10])
            
            # Try to get version info
            if hasattr(simpleenvs_python, '__version__'):
                print(f'Version: {simpleenvs_python.__version__}')
            else:
                print('No __version__ found')
                
        except ImportError as e:
            print(f'‚ùå Import failed: {e}')
            
            # Debug info
            import sys
            print(f'Python path: {sys.path[:3]}...')
            
            import os
            print('Checking installation...')
            try:
                import subprocess
                result = subprocess.run(['pip', 'show', 'simpleenvs-python'], capture_output=True, text=True)
                print('Pip show output:')
                print(result.stdout)
            except:
                print('Could not run pip show')
                
            raise
            
        except Exception as e:
            print(f'‚ùå Unexpected error: {e}')
            raise
            
        print('üéâ All tests completed successfully!')
        "
        echo "üéâ All tests passed!"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build aiofiles  # üëà Ïó¨Í∏∞ÎèÑ Ï∂îÍ∞Ä!

    - name: Build package
      run: |
        python -m build
        echo "‚úÖ Package built successfully!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

---

# .github/workflows/deploy.yml
name: Deploy to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine aiofiles  # üëà Ïó¨Í∏∞ÎèÑ!

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "üöÄ Successfully deployed to PyPI!"
